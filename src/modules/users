#!/bin/bash

# Function to create a new user
function users::create() {
    local username="$1"
    local password="$2"
    local is_admin="$3" # true or false
    local theshell="/bin/bash"

    # If the user is not an admin, restrict the shell
    [ "$is_admin" == "false" ] && theshell="/bin/rbash"
    logger::log "info" "Creating user ${username}."
    logger::do "useradd ${username} -m -G www-data -s ${theshell}"
    if [[ -n "${password}" ]]; then
        users::password::set "${username}" "${password}"
    else
        password=$(users::password::generate 16)
        users::password::set "${username}" "${password}"
    fi
    [ "$is_admin" == "true" ] && echo "${username} ALL=(ALL) NOPASSWD:ALL" >>/etc/sudoers
}

# Function to set the password for a user
function users::password::set() {
    local username="$1"
    local password="$2"
    logger::log "info" "Setting password for ${username}."
    logger::do "echo ${username}:${password} | chpasswd"
    logger::do "printf \"${username}:\$(openssl passwd -apr1 ${password})\n\" >> /etc/htpasswd"
    logger::do "printf \"${username}:\$(openssl passwd -apr1 ${password})\n\" >> /etc/htpasswd.d/htpasswd.${username}"
}

# Function to generate a random password
function users::password::generate() {
    local length="$1"
    tr -dc 'a-zA-Z0-9' </dev/urandom | fold -w "${length}" | head -n 1
}

function users::groups::upgrade() {
    local username="$1"
    local group="$2"

    if [[ "$group" == "sudo" ]]; then
        logger::log "info" "Adding ${username} to sudoers."
        logger::do "usermod -aG sudo ${username}"
        logger::do "echo \"${username} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers"
    elif [[ "$group" == "media" ]]; then
        logger::log "info" "Adding ${username} to media group."
        logger::do "usermod -aG media ${username}"
    elif [[ "$group" == "download" ]]; then
        logger::log "info" "Adding ${username} to download group."
        logger::do "usermod -aG download ${username}"
    elif [[ "$group" == "streaming" ]]; then
        logger::log "info" "Adding ${username} to streaming group."
        logger::do "usermod -aG streaming ${username}"
    elif [[ "$group" == "default" ]]; then
        logger::log "info" "Adding ${username} to default group."
        logger::do "usermod -aG default ${username}"
    else
        logger::log "error" "Invalid group specified."
        return 1
    fi
}

function users::groups::create_groups() {
    local groups=("media" "download" "streaming" "default")
    logger::log "info" "Creating default groups."
    for group in "${groups[@]}"; do
        if ! grep -q "^${group}:" /etc/group; then
            logger::do "groupadd ${group}"
        fi
    done
    logger::log "success" "Default groups created."
}
