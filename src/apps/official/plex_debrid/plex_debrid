#!/usr/bin/env bash
printf "install plex_debrid\n"
source "/home/thomas/Dev/SelfHosted-GitLab/Organizations/MediaEase/scripts/modules/init.sh"
SOFT_PATH="/opt/$USER"
CONFIG_PATH="/home/$USER/.config"
PD_DOWNLOAD_PATH="/home/$USER/debrid"

function init::config() {
    # shellcheck disable=SC2154
    file::parse_app_config "$(dirname "$(readlink -f "$0")")/prout.json"
    declare DEPENDENCIES=("git" "fuse" "libfuse-dev" "python3" "python3-pip" "python3-venv" "xmlstarlet")
    exit 1
}

function self::app:add() {
    init::config
    apt::functions::clear_dpkg
    logger::log "info" "$(i18n::translate 'common.install_start' "$app_name")"
    logger::log "info" "$(i18n::translate 'common.install_deps' "$app_name")"
    app::functions::install::dependencies "${DEPENDENCIES[@]}"
    app::functions::install::external::dependency "rclone_rd" "https://github.com/itsToggle/rclone_RD/releases/download/v1.58.1-rd.2.2/rclone-linux" "/usr/local/bin" "true"
    configureApp
    logger::log "success" "$(i18n::translate 'install_success' "$app_name")"
}

function self::app:configure() {
    logger::prompt_info "Enter your Real-Debrid API Key" api_key
    self::app:configure::rlcone "$CONFIG_PATH" "$api_key"

}

function self::app:configure::rlcone() {
    local config_path="$1"
    local api_key="$2"
    printf "Creating rclone config...\n"
    RCLONE_CONFIG="
[realdebrid]
type = realdebrid
api_key = $api_key
"
    echo "$RCLONE_CONFIG" | sudo tee "$config_path/rclone_rd.conf" >/dev/null || logger::safe_exit 1 "Failed to create rclone config"
    chmod 600 "$config_path/rclone_rd.conf" || logger::safe_exit 1 "Failed to change permissions of rclone config"
    chown -R "$USER":"$USER" "$config_path" || logger::safe_exit 1 "Failed to change ownership of $config_path directory"
}

# Call the function with the path to your YAML file

# Main function to handle actions
function self::action::handler() {
    local action="$1"
    #shellcheck disable=SC2034
    local user="$3"
    case "$action" in
    "add")
        export ZEN_SOFTWARE="add"
        self::app:add
        ;;
    "remove")
        removeApp
        ;;
    "backup")
        backupApp
        ;;
    "update")
        updateApp
        ;;
    *)
        logger::log "error" "$(i18n::translate 'action_invalid' "$action")"
        exit 1
        ;;
    esac
}

if [[ -z "$1" ]]; then
    logger::log "error" "$(i18n::translate 'action_missing')"
    exit 1
fi

self::action::handler "$1" "$2" "$3" "$4"
