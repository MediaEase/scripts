#!/usr/bin/env bash
printf "install radarr\n"
# shellcheck disable=SC1091
source "$MEDIAEASE_HOME/scripts/modules/init.sh"
LOG_FILE="$LOG_DIR/$APP_NAME_SANITIZED.log"

function addApp() {
    apt-get update 2>&1 | tee -a "$LOG_FILE"
    logger::log "info" "$(i18n::translate 'install_start' "$APP_NAME")"
    echo "prout"
    installDependencies "${DEPENDENCIES[@]}"
    echo "caca"
    configureApp
    logger::log "success" "$(i18n::translate 'install_success' "$APP_NAME")"
}

function configureApp() {
    local caddyfile_dest
    local service_file
    local latest_backup
    logger::log "info" "$(i18n::translate 'config_start' "$APP_NAME")"
    latest_backup=$(find "/home/$username/.config/.omni-backups/$APP_NAME/" -maxdepth 1 -type f -printf '%T@ %p\n' | sort -n | tail -1 | awk '{print $2}')
    mkdir -p "/opt/$username/$APP_NAME" "/home/$username/.config/$APP_NAME" "/home/$username/tmp/$APP_NAME"
    file::git_clone_if_not_exists "$REPO" "/opt/$username/$APP_NAME"
    app::functions::multi_user_handler "$APP_NAME" "$username" "true"
    cp Caddyfile.tpl "$caddyfile_dest"
    sed -i -e "s|\$app_name|$APP_NAME_SANITIZED|g" \
        -e "s|\$port|$WEB_PORT|g" \
        -e "s|\$username|$username|g" \
        "$caddyfile_dest"
    cat >"/home/$username/.config/Radarr/config.xml" <<RCON
<Config>
    <AnalyticsEnabled>False</AnalyticsEnabled>
    <ApiKey>a2ff039e12fb488bb6b0ce4528575a64</ApiKey>
    <AuthenticationMethod>Forms</AuthenticationMethod>
    <AuthenticationRequired>Enabled</AuthenticationRequired>
    <BindAddress>127.0.0.1</BindAddress>
    <Branch>nightly</Branch>
    <InstanceName>Radarr</InstanceName>
    <LaunchBrowser>False</LaunchBrowser>
    <LogLevel>Info</LogLevel>
    <Port>$WEB_PORT</Port>
    <SslPort>$SSL_PORT</SslPort>
    <SslCertPath></SslCertPath>
    <SslCertPassword></SslCertPassword>
    <Theme>dark</Theme>
    <UpdateAutomatically>True</UpdateAutomatically>
    <UpdateMechanism>BuiltIn</UpdateMechanism>
    <UrlBase>${username}/$APP_NAME_SANITIZED</UrlBase>
</Config>
RCON
    if [ -n "$latest_backup" ]; then
        logger::log "info" "$(i18n::translate 'restore_backup' "$latest_backup")"
        tar -xzf "$latest_backup" -C "/tmp/backup-$APP_NAME"
        mv "/tmp/backup-$APP_NAME/$APP_NAME/config.xml" "/home/$username/.config/$APP_NAME"
        mv "/tmp/backup-$APP_NAME/$APP_NAME/radarr.db" "/home/$username/.config/$APP_NAME"
        mv "/tmp/backup-$APP_NAME/$APP_NAME/Backups" "/home/$username/.config/$APP_NAME"
        mv "/tmp/backup-$APP_NAME/$APP_NAME/$service_name.service" "/etc/systemd/system"
        mv "/tmp/backup-$APP_NAME/$APP_NAME/$APP_NAME" "/etc/caddy/softwares/$username"
    fi
    for dir in "/opt/$username/$APP_NAME" "/home/$username/.config/$APP_NAME" "/home/$username/tmp/$APP_NAME"; do
        file::fine_tune_permissions "$dir" "$username" "$username" "755" "644"
    done
    cp service.tpl "$service_file"
    app::functions::service_manager enable "$service_name"
    backupApp
    logger::log "success" "$(i18n::translate 'config_complete' "$APP_NAME")"
}

function backupApp() {
    local backup_base="/home/$username/.config/.omni-backups"
    local backup_name
    backup_name="$APP_NAME-backup-$(date +"%Y-%m-%d-%H-%M-%S")"
    local backup_dir="$backup_base/$APP_NAME/$backup_name"
    local backup_file="$backup_base/$backup_name.tar.gz"
    logger::log "info" "$(i18n::translate 'backup_start' "$APP_NAME")"
    mkdir -p "$backup_dir"
    local files_to_backup=(
        "/home/$username/.config/$APP_NAME/config.xml"
        "/home/$username/.config/$APP_NAME/radarr.db"
        "/etc/systemd/system/$APP_NAME_SANITIZED@$username.service"
        "/etc/caddy/softwares/$username/$APP_NAME"
    )
    for file in "${files_to_backup[@]}"; do
        cp -pr "$file" "$backup_dir"
    done
    if [ -d "/home/$username/.config/$APP_NAME/Backups" ]; then
        cp -pr "/home/$username/.config/$APP_NAME/Backups" "$backup_dir"
    fi
    tar -czvf "$backup_file" "$backup_dir" >/dev/null 2>&1
    rm -rf "$backup_dir"
    file::fine_tune_permissions "$backup_file" "$username" "$username" "755" "644"
    logger::log "success" "$(i18n::translate 'backup_complete' "$APP_NAME")"
}

function updateApp() {
    local service_name
    local service_file
    local caddyfile_dest
    logger::log "info" "$(i18n::translate 'update_start' "$APP_NAME")"
    app::functions::multi_user_handler "$APP_NAME" "$username" "true"
    app::functions::service_manager stop "$service_name"
    logger::do "git -C /opt/$username/$APP_NAME pull"
    file::fine_tune_permissions "/opt/$username/$APP_NAME" "$username" "$username" "755" "644"
    app::functions::service_manager start "$service_name"
    logger::log "success" "$(i18n::translate 'update_complete' "$APP_NAME")"
}

function removeApp() {
    local skip_removal=$1
    local service_name
    local service_file
    local caddyfile_dest
    logger::log "info" "$(i18n::translate 'remove_start' "$APP_NAME")"
    app::functions::multi_user_handler "$APP_NAME" "$username" "true"
    app::functions::service_manager disable "$service_name"
    if [ "$skip_removal" != "true" ]; then
        backupApp
    else
        rm -rf "/opt/$username/$APP_NAME" "/home/$username/.config/$APP_NAME" "/home/$username/tmp/$APP_NAME" "$service_file" "$caddyfile_dest"
    fi
    logger::log "success" "$(i18n::translate 'remove_complete' "$APP_NAME")"
}

function reinstallApp() {
    logger::log "info" "$(i18n::translate 'reinstall_start' "$APP_NAME")"
    logger::log "warning" "$(i18n::translate 'reinstall_warning' "$APP_NAME")"
    removeApp true
    addApp
    logger::log "success" "$(i18n::translate 'reinstall_complete' "$APP_NAME")"
}

# Main function to handle actions
function handleAction() {
    local action="$1"
    local username="$2"
    local option="$3"
    load_arguments "$(dirname "$(readlink -f "$0")")/config.yaml"
    echo "$APP_NAME"
    case "$action" in
    "add")
        app::functions::4k_renamer "$APP_NAME" "$option"
        addApp
        ;;
    "remove")
        app::functions::4k_renamer "$APP_NAME" "$option"
        removeApp
        ;;
    "backup")
        app::functions::4k_renamer "$APP_NAME" "$option"
        backupApp
        ;;
    "update")
        app::functions::4k_renamer "$APP_NAME" "$option"
        updateApp
        ;;
    *)
        logger::log "error" "$(i18n::translate 'action_invalid' "$action")"
        exit 1
        ;;
    esac
}

if [[ -z "$1" ]]; then
    logger::log "error" "$(i18n::translate 'action_missing')"
    exit 1
fi

handleAction "$1" "$2" "$3"
