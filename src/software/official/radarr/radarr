#!/usr/bin/env bash
################################################################################
# @file_name: radarr
# @version: 1
# @project_name: zen
# @description: Radarr Handler
#
# @author: Thomas Chauveau (tomcdj71)
# @author_contact: thomas.chauveau.pro@gmail.com
#
# @license: BSD-3 Clause (Included in LICENSE)
# Copyright (C) 2024, Thomas Chauveau
# All rights reserved.
################################################################################

################################################################################
# zen::software::radarr::add
#
# Adds a Radarr application for a user, including downloading the release,
# configuring the application, generating a proxy file, and starting the service.
#
# Arguments:
#   app_name - The name of the application (Radarr).
#   app_name_sanitized - A sanitized version of the application name for display.
# Globals:
#   software_config_file - Global variable containing the path to the software's
#                          configuration file.
#   user - An associative array containing user-specific information.
# Outputs:
#   Downloads, configures, and starts the Radarr application for the user.
# shellcheck disable=SC2154
# Disabling SC2154 because the variable is defined in the main script
################################################################################
zen::software::radarr::add(){
    local app_name="$1"
    local app_name_sanitized="$2"
    local username="${user[username]}"
    is_prerelease="false"
    [[ "$software_branch" == "beta" ]] && is_prerelease="true"
    # grab the correct release
    zen::common::git::get_release "/opt/${user[username]}/$app_name" "Radarr/Radarr" "$is_prerelease" "linux-core-x64.tar.gz"
    # configure the app. This will also generate the proxy file
    zen::software::radarr::config "$app_name" "$app_name_sanitized" "$is_prerelease"
    # generate the service file, this will also start it
    zen::service::generate "$app_name" "$software_config_file"
    chmod a+x "/opt/${user[username]}/$app_name/Radarr"
    # create a backup file
    zen::software::backup::create "$app_name" "$software_config_file"
}

################################################################################
# zen::software::radarr::config
#
# Configures the Radarr application for a user, including setting up the
# application's configuration file and generating proxy settings.
#
# Arguments:
#   app_name - The name of the application (Radarr).
#   app_name_sanitized - A sanitized version of the application name for display.
#   is_prerelease - Indicates whether to use a prerelease version of Radarr.
# Globals:
#   user - An associative array containing user-specific information.
# Outputs:
#   Configures the Radarr application for the user.
################################################################################
zen::software::radarr::config(){
    local app_name="$1"
    local app_name_sanitized="$2"
    local is_prerelease="$3"
    declare -g url_base
    mflibs::shell::text::white "$(zen::i18n::translate "software.configuring_application" "$app_name")"
    zen::software::autogen
    url_base="/${user[username]}/${app_name}"
    [[ $is_prerelease == "true" ]] && branch="develop" || branch="master"
    mkdir -p "/home/${user[username]}/.config/${app_name}"
    cat > "/home/${user[username]}/.config/${app_name}/config.xml" <<RCON
<Config>
    <BindAddress>127.0.0.1</BindAddress>
    <Port>${default_port}</Port>
    <UrlBase>${url_base}</UrlBase>
    <EnableSsl>False</EnableSsl>
    <SslPort>${ssl_port}</SslPort>
    <SslCertPath></SslCertPath>
    <SslCertPassword></SslCertPassword>
    <ApiKey>${apikey}</ApiKey>
    <LogLevel>Info</LogLevel>
    <AnalyticsEnabled>False</AnalyticsEnabled>
    <Branch>${branch}</Branch>
    <UpdateAutomatically>True</UpdateAutomatically>
    <UpdateMechanism>BuiltIn</UpdateMechanism>
    <LaunchBrowser>False</LaunchBrowser>
    <InstanceName>${app_name_sanitized}</InstanceName>
    <Theme>dark</Theme>
</Config>
RCON

    # generate the proxy configuration
    zen::common::fix::permissions "/home/${user[username]}/.config/${app_name}" "${user[username]}" "${user[username]}" "755" "644"
    zen::proxy::generate "$app_name" "$default_port" "$url_base"
    mflibs::shell::text::green "$(zen::i18n::translate "software.application_configured" "$app_name")"
}

################################################################################
# zen::software::radarr::update
#
# Updates the Radarr application for a user by stopping the service, downloading
# the latest release, and restarting the service.
#
# Arguments:
#   app_name - The name of the application (Radarr).
#   app_name_sanitized - A sanitized version of the application name for display.
# Globals:
#   user - An associative array containing user-specific information.
#   software_config_file - Path to the software's configuration file.
# Outputs:
#   Updates the Radarr application for the user.
################################################################################
zen::software::radarr::update(){
    local app_name="$1"
    local app_name_sanitized="$2"
    local username="${user[username]}"
    local service_name
    is_multi=$(zen::software::get_config_key_value "$software_config_file" '.arguments.multi_user')
    [ "$is_multi" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"
    zen::service::manage "stop" "$service_name"
    rm -rf "/opt/${user[username]}/$app_name"
    is_prerelease="false"
    [[ "$software_branch" == "beta" ]] && is_prerelease="true"
    # grab the correct release
    zen::common::git::get_release "/opt/${user[username]}/$app_name" "Radarr/Radarr" "$is_prerelease" "linux-core-x64.tar.gz"
    zen::service::manage "start" "$service_name"
}

################################################################################
# zen::software::radarr::remove
#
# Removes the Radarr application for a user, including disabling and deleting
# the service, removing proxy configurations, and cleaning up application files.
#
# Arguments:
#   app_name - The name of the application (Radarr).
#   app_name_sanitized - A sanitized version of the application name for display.
# Globals:
#   user - An associative array containing user-specific information.
# Outputs:
#   Removes the Radarr application and its configurations for the user.
################################################################################
zen::software::radarr::remove(){
    local app_name="$1"
    local app_name_sanitized="$2"
    local username="${user[username]}"
    local service_name
    is_multi=$(zen::software::get_config_key_value "$software_config_file" '.arguments.multi_user')
    [ "$is_multi" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"
    
    zen::service::manage "disable" "$service_name"
    rm -f "$service_file"
    zen::proxy::remove "$app_name" "${user[username]}"
    rm -rf /opt/"${user[username]}"/"$app_name"
    rm -rf /home/"${user[username]}"/.config/"$app_name"
    rm -rf /home/"${user[username]}"/tmp/"$app_name"
}

################################################################################
# zen::software::radarr::backup
#
# Creates a backup for the Radarr application settings for a user.
# (This function is currently a placeholder and needs implementation.)
#
# Arguments:
#   username - The username of the user for whom to create the backup.
#   app_name - The name of the application (Radarr).
################################################################################
zen::software::radarr::backup(){
    local username="$1"
    local app_name="$2"
}

################################################################################
# zen::software::radarr::reset
#
# Resets the Radarr application settings for a user.
# (This function is currently a placeholder and needs implementation.)
#
# Arguments:
#   username - The username of the user for whom to reset the settings.
#   app_name - The name of the application (Radarr).
################################################################################
zen::software::radarr::reset(){
    local username="$1"
    local app_name="$2"
}

################################################################################
# zen::software::radarr::reinstall
#
# Reinstalls the Radarr application for a user.
# (This function is currently a placeholder and needs implementation.)
#
# Arguments:
#   username - The username of the user for whom to reinstall the application.
#   app_name - The name of the application (Radarr).
################################################################################
zen::software::radarr::reinstall(){
    local username="$1"
    local app_name="$2"
}
